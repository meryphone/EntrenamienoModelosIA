# Marca el valor de la media con una línea azul vertical
myhist <- myhist + geom_vline(xintercept = mean(credit$V3),
col = "blue", linetype = "dashed")
# Marca el valor de la mediana con una línea roja vertical
myhist <- myhist + geom_vline(xintercept = median(credit$V3),
col = "red", linetype = "dashed")
myhist
ggplot(credit, aes(sample = V3)) +
stat_qq() +
stat_qq_line(color = "blue", linetype = "dashed") +
labs(title = "Diagrama Q-Q de V3", x = "Cuantiles Teóricos", y = "Cuantiles Muestrales")
summary(credit$V8)
myhist = ggplot(data=credit, aes(x = V8)) +
geom_histogram(col="orange", fill="orange", alpha=0.2,
breaks=seq(0, 30, by=1)) +
labs(title="Histograma para el análisis de la variable V8", y="Count")
# Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V8),
col="blue", linetype="dashed")
# Marca el valor de la mediana con una línea roja vertical
myhist = myhist + geom_vline(xintercept = median(credit$V8),
col="red", linetype="dashed")
# Mostrar el histograma
myhist
ggplot(data = credit, aes(sample = V8)) +
ggtitle("QQ plot para variable V8") +
stat_qq() +
stat_qq_line() +
xlab("Distribución teórica") +
ylab("Distribución muestral")
numeric_data <- credit[, c("V2", "V3", "V8", "V11", "V14", "V15", "V16")]
if (!require(GGally)) install.packages("GGally")
library(GGally)
# Generar el gráfico de pares con colores según la columna V16
ggpairs(numeric_data, aes(color = V16), title = "Relación entre atributos en el análisis de la BBDD credit")
Q1=quantile(credit$V2,0.25)
Q3=quantile(credit$V2,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv2=credit$V2[credit$V2<limiteInferior | credit$V2>limiteSuperior]
percAtipicos=100*length(atipicosv2)/length((credit$V2))
print(paste("El porcentaje de datos atípicos para V2 es = ",percAtipicos))
Q1=quantile(credit$V3,0.25)
Q3=quantile(credit$V3,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv3=credit$V3[credit$V3<limiteInferior | credit$V3>limiteSuperior]
percAtipicos=100*length(atipicosv3)/length((credit$V3))
print(paste("El porcentaje de datos atípicos para V3 es = ",percAtipicos))
Q1=quantile(credit$V14,0.25)
Q3=quantile(credit$V14,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv14=credit$V14[credit$V14<limiteInferior | credit$V14>limiteSuperior]
percAtipicos=100*length(atipicosv14)/length((credit$V14))
print(paste("El porcentaje de datos atípicos para V14 es = ",percAtipicos))
Q1=quantile(credit$V8,0.25)
Q3=quantile(credit$V8,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv8=credit$V8[credit$V8<limiteInferior | credit$V8>limiteSuperior]
percAtipicos=100*length(atipicosv8)/length((credit$V8))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
ggplot(credit, aes(x = V8)) +
geom_histogram(bins = 30, fill = "orange", color = "black", alpha = 0.7) +
labs(title = "Histograma de V8 original", x = "V8 (original)", y = "Frecuencia")
# Calcular el porcentaje de valores atípicos para V18 normalizada
Q <- quantile(credit$V8, c(0.25, 0.75))
IQR <- Q[2] - Q[1]
lim_inf <- Q[1] - 1.5 * IQR
lim_sup <- Q[2] + 1.5 * IQR
porc_atipicos <- mean(credit$V8 < lim_inf | credit$V8 > lim_sup) * 100
porc_atipicos
#Normalización min/max
credit$V8 <- (credit$V8 - min(credit$V8)) / (max(credit$V8) - min(credit$V8))
min(credit$V8)
max(credit$V8)
# Calcular el porcentaje de valores atípicos para V18 normalizada
Q <- quantile(credit$V8, c(0.25, 0.75))
IQR <- Q[2] - Q[1]
lim_inf <- Q[1] - 1.5 * IQR
lim_sup <- Q[2] + 1.5 * IQR
porc_atipicos <- mean(credit$V8 < lim_inf | credit$V8 > lim_sup) * 100
porc_atipicos
mymodel2 = glm(v16 ~ ., data=credit$V16,family=binomial(link="logit"))
mymodel2 = glm(credit$V16 ~ ., data=credit$V16,family=binomial(link="logit"))
summary(mymodel2)
mymodel2 = glm(V16 ~ ., data=credit,family=binomial(link="logit"))
summary(mymodel2)
credit = read.table("crx.data", sep = ",", na.strings ="?")
credit.trainIdx<-readRDS("credit.trainIdx")
#credit.Datos.Train<-credit[credit.trainIdx,]
#credit.Datos.Test<-credit[-credit.trainIdx,]
mymodel2 = glm(V16 ~ ., data=credit,family=binomial(link="logit"))
mymodel2 = glm(V16 ~ ., data=credit,family=binomial(link="logit"))
knitr::opts_chunk$set(echo = TRUE)
credit = read.table("crx.data", sep = ",", na.strings ="?")
credit.trainIdx<-readRDS("credit.trainIdx")
#credit.Datos.Train<-credit[credit.trainIdx,]
#credit.Datos.Test<-credit[-credit.trainIdx,]
str(credit)
credit = na.omit(credit)
credit["V1"] = lapply(credit["V1"], FUN = as.factor)
credit["V2"] = lapply(credit["V2"], FUN = as.numeric)
credit["V3"] = lapply(credit["V3"], FUN = as.numeric)
credit["V4"] = lapply(credit["V4"], FUN = as.factor)
credit["V5"] = lapply(credit["V5"], FUN = as.factor)
credit["V6"] = lapply(credit["V6"], FUN = as.factor)
credit["V7"] = lapply(credit["V7"], FUN = as.factor)
credit["V8"] = lapply(credit["V8"], FUN = as.numeric)
credit["V9"] = lapply(credit["V9"], FUN = as.factor)
credit["V10"] = lapply(credit["V10"], FUN = as.factor)
credit["V11"] = lapply(credit["V11"], FUN = as.numeric)
credit["V12"] = lapply(credit["V12"], FUN = as.factor)
credit["V13"] = lapply(credit["V13"], FUN = as.factor)
credit["V14"] = lapply(credit["V14"], FUN = as.numeric)
credit["V15"] = lapply(credit["V15"], FUN = as.numeric)
credit["V16"] = lapply(credit["V16"], FUN = as.factor)
str(credit)
levels(credit$V4)<-c(levels(credit$V4),"t")
str(credit$V4)
str(credit)
summary(credit)
str(credit)
summary(credit$V2)
library(ggplot2)
myhist = ggplot(data=credit,aes(V2)) +
geom_histogram(col="orange",fill="orange",alpha=0.2) +
labs(title="Histograma para V2", y="Count")
myhist = myhist + geom_vline(xintercept = mean(credit$V2),
col="blue",linetype="dashed")
myhist = myhist + geom_vline(xintercept = median(credit$V2),
col="red",linetype="dashed")
myhist
myplot = ggplot(data=credit,aes(sample=V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
myplot
myhist=ggplot(data=credit, aes(x = V3)) +
geom_histogram(col = "orange", fill = "orange", alpha = 0.2,
breaks = seq(0, 30, by = 1)) +
labs(title = "Histograma para el análisis de la variable V3", y = "Count")
# Marca el valor de la media con una línea azul vertical
myhist <- myhist + geom_vline(xintercept = mean(credit$V3),
col = "blue", linetype = "dashed")
# Marca el valor de la mediana con una línea roja vertical
myhist <- myhist + geom_vline(xintercept = median(credit$V3),
col = "red", linetype = "dashed")
myhist
ggplot(credit, aes(sample = V3)) +
stat_qq() +
stat_qq_line(color = "blue", linetype = "dashed") +
labs(title = "Diagrama Q-Q de V3", x = "Cuantiles Teóricos", y = "Cuantiles Muestrales")
summary(credit$V8)
myhist = ggplot(data=credit, aes(x = V8)) +
geom_histogram(col="orange", fill="orange", alpha=0.2,
breaks=seq(0, 30, by=1)) +
labs(title="Histograma para el análisis de la variable V8", y="Count")
# Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V8),
col="blue", linetype="dashed")
# Marca el valor de la mediana con una línea roja vertical
myhist = myhist + geom_vline(xintercept = median(credit$V8),
col="red", linetype="dashed")
# Mostrar el histograma
myhist
ggplot(data = credit, aes(sample = V8)) +
ggtitle("QQ plot para variable V8") +
stat_qq() +
stat_qq_line() +
xlab("Distribución teórica") +
ylab("Distribución muestral")
numeric_data <- credit[, c("V2", "V3", "V8", "V11", "V14", "V15", "V16")]
if (!require(GGally)) install.packages("GGally")
library(GGally)
# Generar el gráfico de pares con colores según la columna V16
ggpairs(numeric_data, aes(color = V16), title = "Relación entre atributos en el análisis de la BBDD credit")
Q1=quantile(credit$V2,0.25)
Q3=quantile(credit$V2,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv2=credit$V2[credit$V2<limiteInferior | credit$V2>limiteSuperior]
percAtipicos=100*length(atipicosv2)/length((credit$V2))
print(paste("El porcentaje de datos atípicos para V2 es = ",percAtipicos))
Q1=quantile(credit$V3,0.25)
Q3=quantile(credit$V3,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv3=credit$V3[credit$V3<limiteInferior | credit$V3>limiteSuperior]
percAtipicos=100*length(atipicosv3)/length((credit$V3))
print(paste("El porcentaje de datos atípicos para V3 es = ",percAtipicos))
Q1=quantile(credit$V14,0.25)
Q3=quantile(credit$V14,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv14=credit$V14[credit$V14<limiteInferior | credit$V14>limiteSuperior]
percAtipicos=100*length(atipicosv14)/length((credit$V14))
print(paste("El porcentaje de datos atípicos para V14 es = ",percAtipicos))
Q1=quantile(credit$V8,0.25)
Q3=quantile(credit$V8,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv8=credit$V8[credit$V8<limiteInferior | credit$V8>limiteSuperior]
percAtipicos=100*length(atipicosv8)/length((credit$V8))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
ggplot(credit, aes(x = V8)) +
geom_histogram(bins = 30, fill = "orange", color = "black", alpha = 0.7) +
labs(title = "Histograma de V8 original", x = "V8 (original)", y = "Frecuencia")
#Normalización min/max
credit$V8 <- (credit$V8 - min(credit$V8)) / (max(credit$V8) - min(credit$V8))
min(credit$V8)
max(credit$V8)
ggplot(credit, aes(x = V8)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histograma de V8 Normalizada", x = "V8 (normalizada)", y = "Frecuencia")
Q1=quantile(credit$V11,0.25)
Q3=quantile(credit$V11,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv11=credit$V11[credit$V11<limiteInferior | credit$V11>limiteSuperior]
percAtipicos=100*length(atipicosv11)/length((credit$V11))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
library(e1071)
# Asimetría antes de la transformación
skewness(credit$V11)
ggplot(credit, aes(x = V11)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histograma de la Variable V11", x = "V11", y = "Frecuencia") +
theme_minimal()
credit$V11 <- log(credit$V11 + 1)  # +1 para evitar log(0) en valores cercanos a cero
ggplot(credit, aes(x = V11)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histograma de la Variable V11 transformada", x = "V11", y = "Frecuencia") +
theme_minimal()
# Calcular el porcentaje de valores atípicos para V11
Q <- quantile(credit$V11, c(0.25, 0.75))
IQR <- Q[2] - Q[1]
lim_inf <- Q[1] - 1.5 * IQR
lim_sup <- Q[2] + 1.5 * IQR
porc_atipicos <- mean(credit$V11 < lim_inf | credit$V11 > lim_sup) * 100
porc_atipicos
skewness(credit$V11)
Q1=quantile(credit$V15,0.25)
Q3=quantile(credit$V15,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv15=credit$V15[credit$V15<limiteInferior | credit$V15>limiteSuperior]
percAtipicos=100*length(atipicosv15)/length((credit$V15))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
ggplot(credit, aes(x = V15)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histograma de la Variable V15", x = "V15", y = "Frecuencia") +
theme_minimal()
credit$V15 <- sqrt(credit$V15)
ggplot(credit, aes(x = V15)) +  # V15 es la variable transformada
geom_histogram(bins = 30, fill = "orange", color = "black", alpha = 0.7) +
labs(title = "Histograma de V15 Transformada (Raíz Cuadrada)", x = "V15 (Transformada)", y = "Frecuencia") +
theme_minimal()
mymodel2 = glm(V16 ~ ., data=credit,family=binomial(link="logit"))
summary(mymodel2)
str(credit)
# Convertir todas las columnas de 'credit' a formato numérico
credit_num <- data.frame(lapply(credit, function(x) {
if (is.factor(x)) {
return(as.numeric(x))  # Convierte factores a numéricos asignando un número a cada nivel
} else {
return(x)  # Deja las variables numéricas como están
}
}))
mymodel2 = glm(V16 ~ ., data=credit_num,family=binomial(link="logit"))
credit = read.table("crx.data", sep = ",", na.strings ="?")
credit.trainIdx<-readRDS("credit.trainIdx")
#credit.Datos.Train<-credit[credit.trainIdx,]
#credit.Datos.Test<-credit[-credit.trainIdx,]
# Convertir todas las columnas de 'credit' a formato numérico
credit_num <- data.frame(lapply(credit, function(x) {
if (is.factor(x)) {
return(as.numeric(x))  # Convierte factores a numéricos asignando un número a cada nivel
} else {
return(x)  # Deja las variables numéricas como están
}
}))
mymodel2 = glm(V16 ~ ., data=credit_num,family=binomial(link="logit"))
str(credit_num)
knitr::opts_chunk$set(echo = TRUE)
credit = read.table("crx.data", sep = ",", na.strings ="?")
credit.trainIdx<-readRDS("credit.trainIdx")
#credit.Datos.Train<-credit[credit.trainIdx,]
#credit.Datos.Test<-credit[-credit.trainIdx,]
str(credit)
credit = na.omit(credit)
credit["V1"] = lapply(credit["V1"], FUN = as.factor)
credit["V2"] = lapply(credit["V2"], FUN = as.numeric)
credit["V3"] = lapply(credit["V3"], FUN = as.numeric)
credit["V4"] = lapply(credit["V4"], FUN = as.factor)
credit["V5"] = lapply(credit["V5"], FUN = as.factor)
credit["V6"] = lapply(credit["V6"], FUN = as.factor)
credit["V7"] = lapply(credit["V7"], FUN = as.factor)
credit["V8"] = lapply(credit["V8"], FUN = as.numeric)
credit["V9"] = lapply(credit["V9"], FUN = as.factor)
credit["V10"] = lapply(credit["V10"], FUN = as.factor)
credit["V11"] = lapply(credit["V11"], FUN = as.numeric)
credit["V12"] = lapply(credit["V12"], FUN = as.factor)
credit["V13"] = lapply(credit["V13"], FUN = as.factor)
credit["V14"] = lapply(credit["V14"], FUN = as.numeric)
credit["V15"] = lapply(credit["V15"], FUN = as.numeric)
credit["V16"] = lapply(credit["V16"], FUN = as.factor)
str(credit)
levels(credit$V4)<-c(levels(credit$V4),"t")
str(credit$V4)
str(credit)
summary(credit)
str(credit)
summary(credit$V2)
library(ggplot2)
myhist = ggplot(data=credit,aes(V2)) +
geom_histogram(col="orange",fill="orange",alpha=0.2) +
labs(title="Histograma para V2", y="Count")
myhist = myhist + geom_vline(xintercept = mean(credit$V2),
col="blue",linetype="dashed")
myhist = myhist + geom_vline(xintercept = median(credit$V2),
col="red",linetype="dashed")
myhist
myplot = ggplot(data=credit,aes(sample=V2)) +
ggtitle("QQ plot para V2") +
geom_qq() +
stat_qq_line() +
xlab("Distribución teórica") + ylab("Distribución muestral")
myplot
myhist=ggplot(data=credit, aes(x = V3)) +
geom_histogram(col = "orange", fill = "orange", alpha = 0.2,
breaks = seq(0, 30, by = 1)) +
labs(title = "Histograma para el análisis de la variable V3", y = "Count")
# Marca el valor de la media con una línea azul vertical
myhist <- myhist + geom_vline(xintercept = mean(credit$V3),
col = "blue", linetype = "dashed")
# Marca el valor de la mediana con una línea roja vertical
myhist <- myhist + geom_vline(xintercept = median(credit$V3),
col = "red", linetype = "dashed")
myhist
ggplot(credit, aes(sample = V3)) +
stat_qq() +
stat_qq_line(color = "blue", linetype = "dashed") +
labs(title = "Diagrama Q-Q de V3", x = "Cuantiles Teóricos", y = "Cuantiles Muestrales")
summary(credit$V8)
myhist = ggplot(data=credit, aes(x = V8)) +
geom_histogram(col="orange", fill="orange", alpha=0.2,
breaks=seq(0, 30, by=1)) +
labs(title="Histograma para el análisis de la variable V8", y="Count")
# Marca el valor de la media con una línea azul vertical
myhist = myhist + geom_vline(xintercept = mean(credit$V8),
col="blue", linetype="dashed")
# Marca el valor de la mediana con una línea roja vertical
myhist = myhist + geom_vline(xintercept = median(credit$V8),
col="red", linetype="dashed")
# Mostrar el histograma
myhist
ggplot(data = credit, aes(sample = V8)) +
ggtitle("QQ plot para variable V8") +
stat_qq() +
stat_qq_line() +
xlab("Distribución teórica") +
ylab("Distribución muestral")
numeric_data <- credit[, c("V2", "V3", "V8", "V11", "V14", "V15", "V16")]
if (!require(GGally)) install.packages("GGally")
library(GGally)
# Generar el gráfico de pares con colores según la columna V16
ggpairs(numeric_data, aes(color = V16), title = "Relación entre atributos en el análisis de la BBDD credit")
Q1=quantile(credit$V2,0.25)
Q3=quantile(credit$V2,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv2=credit$V2[credit$V2<limiteInferior | credit$V2>limiteSuperior]
percAtipicos=100*length(atipicosv2)/length((credit$V2))
print(paste("El porcentaje de datos atípicos para V2 es = ",percAtipicos))
Q1=quantile(credit$V3,0.25)
Q3=quantile(credit$V3,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv3=credit$V3[credit$V3<limiteInferior | credit$V3>limiteSuperior]
percAtipicos=100*length(atipicosv3)/length((credit$V3))
print(paste("El porcentaje de datos atípicos para V3 es = ",percAtipicos))
Q1=quantile(credit$V14,0.25)
Q3=quantile(credit$V14,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv14=credit$V14[credit$V14<limiteInferior | credit$V14>limiteSuperior]
percAtipicos=100*length(atipicosv14)/length((credit$V14))
print(paste("El porcentaje de datos atípicos para V14 es = ",percAtipicos))
Q1=quantile(credit$V8,0.25)
Q3=quantile(credit$V8,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv8=credit$V8[credit$V8<limiteInferior | credit$V8>limiteSuperior]
percAtipicos=100*length(atipicosv8)/length((credit$V8))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
ggplot(credit, aes(x = V8)) +
geom_histogram(bins = 30, fill = "orange", color = "black", alpha = 0.7) +
labs(title = "Histograma de V8 original", x = "V8 (original)", y = "Frecuencia")
#Normalización min/max
credit$V8 <- (credit$V8 - min(credit$V8)) / (max(credit$V8) - min(credit$V8))
min(credit$V8)
max(credit$V8)
ggplot(credit, aes(x = V8)) +
geom_histogram(bins = 30, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Histograma de V8 Normalizada", x = "V8 (normalizada)", y = "Frecuencia")
Q1=quantile(credit$V11,0.25)
Q3=quantile(credit$V11,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv11=credit$V11[credit$V11<limiteInferior | credit$V11>limiteSuperior]
percAtipicos=100*length(atipicosv11)/length((credit$V11))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
library(e1071)
# Asimetría antes de la transformación
skewness(credit$V11)
ggplot(credit, aes(x = V11)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histograma de la Variable V11", x = "V11", y = "Frecuencia") +
theme_minimal()
credit$V11 <- log(credit$V11 + 1)  # +1 para evitar log(0) en valores cercanos a cero
ggplot(credit, aes(x = V11)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histograma de la Variable V11 transformada", x = "V11", y = "Frecuencia") +
theme_minimal()
# Calcular el porcentaje de valores atípicos para V11
Q <- quantile(credit$V11, c(0.25, 0.75))
IQR <- Q[2] - Q[1]
lim_inf <- Q[1] - 1.5 * IQR
lim_sup <- Q[2] + 1.5 * IQR
porc_atipicos <- mean(credit$V11 < lim_inf | credit$V11 > lim_sup) * 100
porc_atipicos
skewness(credit$V11)
Q1=quantile(credit$V15,0.25)
Q3=quantile(credit$V15,0.75)
RIC=Q3-Q1
limiteInferior=Q1-1.5*RIC
limiteSuperior=Q3+1.5*RIC
atipicosv15=credit$V15[credit$V15<limiteInferior | credit$V15>limiteSuperior]
percAtipicos=100*length(atipicosv15)/length((credit$V15))
print(paste("El porcentaje de datos atípicos es = ",percAtipicos))
ggplot(credit, aes(x = V15)) +
geom_histogram(bins = 30, fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Histograma de la Variable V15", x = "V15", y = "Frecuencia") +
theme_minimal()
credit$V15 <- sqrt(credit$V15)
ggplot(credit, aes(x = V15)) +  # V15 es la variable transformada
geom_histogram(bins = 30, fill = "orange", color = "black", alpha = 0.7) +
labs(title = "Histograma de V15 Transformada (Raíz Cuadrada)", x = "V15 (Transformada)", y = "Frecuencia") +
theme_minimal()
# Convertir todas las columnas de 'credit' a formato numérico
credit_num <- data.frame(lapply(credit, function(x) {
if (is.factor(x)) {
return(as.numeric(x))  # Convierte factores a numéricos asignando un número a cada nivel
} else {
return(x)  # Deja las variables numéricas como están
}
}))
mymodel2 = glm(V16 ~ ., data=credit_num,family=binomial(link="logit"))
str(credit_num)
# Convertir todas las columnas de 'credit' a formato numérico
credit_num <- data.frame(lapply(credit, function(x) {
if (is.factor(x)) {
return(as.numeric(x))  # Convierte factores a numéricos asignando un número a cada nivel
} else {
return(x)  # Deja las variables numéricas como están
}
}))
credit_num$V16=lapply(credit_num$V16,FUN = as.factor)
mymodel2 = glm(V16 ~ ., data=credit_num,family=binomial(link="logit"))
str(credit$V16)
# Convertir todas las columnas de 'credit' a formato numérico
credit_num <- data.frame(lapply(credit, function(x) {
if (is.factor(x)) {
return(as.numeric(x))  # Convierte factores a numéricos asignando un número a cada nivel
} else {
return(x)  # Deja las variables numéricas como están
}
}))
credit_num$V16 <- as.factor(unlist(credit_num$V16))
mymodel2 = glm(V16 ~ ., data=credit_num,family=binomial(link="logit"))
summary(mymodel2)
mymodel2 = glm(V16 ~ ., data=credit,family=binomial(link="logit"))
summary(mymodel2)
# Convertir todas las columnas de 'credit' a formato numérico
credit_num <- data.frame(lapply(credit, function(x) {
if (is.factor(x)) {
return(as.numeric(x))  # Convierte factores a numéricos asignando un número a cada nivel
} else {
return(x)  # Deja las variables numéricas como están
}
}))
credit_num$V16 <- as.factor(unlist(credit_num$V16))
mymodel2 = glm(V16 ~ ., data=credit_num,family=binomial(link="logit"))
summary(mymodel2)
